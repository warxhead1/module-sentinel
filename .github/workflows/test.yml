name: Module Sentinel Tests

on:
  push:
    branches: [ main, master, rust-migration-deprecation ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Extended for Rust compilation and comprehensive tests
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4.0.1
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          module-sentinel-rust/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create test directories
      run: |
        mkdir -p .test-db
        mkdir -p test-results
        mkdir -p coverage
        mkdir -p test-project/src
        
        # Create minimal test project structure
        echo "export function helper() { return 'helper'; }" > test-project/src/helper.ts
        echo "import { helper } from './helper'; console.log(helper());" > test-project/src/main.ts
        
        # Create fallback test fixtures
        mkdir -p test-fixtures-fallback
        echo "export const fallback = 'test';" > test-fixtures-fallback/fallback.ts
    
    - name: Build Rust NAPI bindings
      run: npm run build:rust
      env:
        CARGO_TARGET_DIR: ${{ github.workspace }}/module-sentinel-rust/target
    
    - name: Build TypeScript project
      run: npx tsc
    
    - name: Build dashboard
      run: npm run build:dashboard
    
    - name: Run TypeScript type checks
      run: npm run typecheck
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true # Don't fail on lint warnings
    
    - name: Run Jest unit tests
      run: npm run test:ci
      env:
        CI: true
        NODE_ENV: test
        PROJECT_PATH: ${{ github.workspace }}/test-project
        TEST_DATABASE_PATH: ${{ github.workspace }}/.test-db/test-module-sentinel.db
        
    - name: Test Flow API Integration
      run: node test/integration/flow-api.test.js
      env:
        CI: true
        NODE_ENV: test
        PROJECT_PATH: ${{ github.workspace }}/test-project
        PORT: 6970
      continue-on-error: true # Flow API test is optional since it requires full Rust integration
    
    - name: Test MCP Rust Integration
      run: npx tsx src/__tests__/integration/mcp-rust-integration.test.ts
      env:
        CI: true
        NODE_ENV: test
        PROJECT_PATH: ${{ github.workspace }}/test-project
        TEST_DATABASE_PATH: ${{ github.workspace }}/.test-db/test-module-sentinel.db
      continue-on-error: true # Rust integration test is optional
    
    - name: Test Dashboard Server
      run: |
        # Start dashboard server in background
        npm run start:dashboard &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test basic endpoints
        curl -f http://localhost:6969/api/symbols/search?q=test || echo "API test failed"
        curl -f http://localhost:6969/api/flow/symbols || echo "Flow API test failed"
        
        # Stop server
        kill $SERVER_PID || true
      env:
        CI: true
        NODE_ENV: test
        PROJECT_PATH: ${{ github.workspace }}/test-project
      continue-on-error: true # Dashboard test is optional
    
    - name: Validate Build Artifacts
      run: |
        echo "üîç Validating build artifacts..."
        
        # Check if TypeScript compiled
        if [ ! -d "dist" ]; then
          echo "‚ùå Missing dist directory"
          exit 1
        fi
        
        # Check if main entry exists
        if [ ! -f "dist/index.js" ]; then
          echo "‚ùå Missing dist/index.js"
          exit 1
        fi
        
        # Check if Rust bindings exist
        if [ ! -f "module-sentinel-rust.node" ]; then
          echo "‚ö†Ô∏è Missing Rust NAPI bindings (optional)"
        fi
        
        # Check if dashboard built
        if [ ! -d "dist/dashboard" ]; then
          echo "‚ùå Missing dist/dashboard directory"
          exit 1
        fi
        
        echo "‚úÖ Build artifacts validation passed"
    
    - name: Validate Test Results
      run: |
        echo "üîç Validating test results..."
        
        # Check if Jest ran and created coverage
        if [ -d "coverage" ]; then
          echo "‚úÖ Test coverage generated"
          
          # Check for coverage files
          if [ -f "coverage/lcov.info" ]; then
            echo "‚úÖ LCOV coverage report exists"
          fi
          
          # Check coverage threshold (optional)
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "‚úÖ Coverage summary exists"
          fi
        else
          echo "‚ö†Ô∏è No coverage directory found"
        fi
        
        # Check if test results exist
        if [ -f "test-results.xml" ]; then
          echo "‚úÖ JUnit test results exist"
          
          # Count tests
          test_count=$(grep -c '<testcase' test-results.xml || echo "0")
          echo "üìä Tests executed: $test_count"
          
          # Check for failures
          if grep -q 'failures="[^0]"' test-results.xml; then
            echo "‚ö†Ô∏è Some test failures detected"
          fi
          
          if grep -q 'errors="[^0]"' test-results.xml; then
            echo "‚ö†Ô∏è Some test errors detected"
          fi
        else
          echo "‚ö†Ô∏è No JUnit test results found"
        fi
        
        echo "‚úÖ Test validation completed"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x' && always()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: module-sentinel-coverage
        fail_ci_if_error: false # Don't fail CI on coverage upload issues
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4.3.1
      if: always()
      with:
        name: test-artifacts-${{ matrix.node-version }}
        path: |
          test-results.xml
          coverage/
          .test-db/
          dist/
          module-sentinel-rust.node
        retention-days: 30

  build-only:
    # Separate job for build verification without full test suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4.0.1
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create minimal test structure
      run: |
        mkdir -p test-project/src
        echo "export const test = 'build-test';" > test-project/src/main.ts
    
    - name: Build Rust NAPI bindings
      run: npm run build:rust
    
    - name: Build project
      run: npm run build
    
    - name: Verify build output
      run: |
        echo "‚úÖ Build verification completed"
        ls -la dist/
        if [ -f "module-sentinel-rust.node" ]; then
          echo "‚úÖ Rust bindings built successfully"
        else
          echo "‚ö†Ô∏è Rust bindings not found"
        fi